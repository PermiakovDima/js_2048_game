{"version":3,"sources":["scripts/main.js"],"names":["board","rows","columns","score","start","document","querySelector","massageStart","massageLose","messageWin","randomaizer","randomRow","Math","floor","random","randomColumn","count","updateBoard","r","col","classList","remove","htmlBoard","querySelectorAll","innerHTML","children","className","add","reset","starter","addEventListener","includes","window","events","code","slider","course","boardVert","i","length","push","row","slide","reverse","numbers","filter","el","x"],"mappings":"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","file":"main.8cdb8404.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nlet board = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\nconst rows = 4;\r\nconst columns = 4;\r\nlet score = 0;\r\nconst start = document.querySelector('.button');\r\nconst massageStart = document.querySelector('.message-start');\r\nconst massageLose = document.querySelector('.message-lose');\r\nconst messageWin = document.querySelector('.message-win');\r\n\r\nconst randomaizer = () => {\r\n  const randomRow = Math.floor(Math.random() * rows);\r\n  const randomColumn = Math.floor(Math.random() * columns);\r\n  const randomNumber = Math.floor(Math.random() * 10);\r\n  const count = randomNumber < 9 ? 2 : 4;\r\n\r\n  if (board[randomRow][randomColumn] === 0) {\r\n    board[randomRow][randomColumn] = count;\r\n    updateBoard();\r\n  } else {\r\n    for (const r in board) {\r\n      for (const col in board[r]) {\r\n        if (board[r][col] === 0) {\r\n          randomaizer();\r\n\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    massageLose.classList.remove('hidden');\r\n  }\r\n};\r\n\r\nconst updateBoard = () => {\r\n  const htmlBoard = document.querySelectorAll('.field-row');\r\n  const htmlScore = document.querySelector('.game-score');\r\n\r\n  htmlScore.innerHTML = score;\r\n\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let col = 0; col < columns; col++) {\r\n      if (board[r][col] === 0) {\r\n        htmlBoard[r].children[col].innerHTML = '';\r\n        htmlBoard[r].children[col].className = '';\r\n        htmlBoard[r].children[col].classList.add('field-cell');\r\n      } else {\r\n        htmlBoard[r].children[col].innerHTML = board[r][col];\r\n\r\n        htmlBoard[r].children[col].className = '';\r\n        htmlBoard[r].children[col].classList.add('field-cell');\r\n\r\n        htmlBoard[r].children[col].classList\r\n          .add(`field-cell--${board[r][col]}`);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst reset = () => {\r\n  const htmlBoard = document.querySelectorAll('.field-row');\r\n\r\n  massageLose.classList.add('hidden');\r\n  messageWin.classList.add('hidden');\r\n\r\n  score = 0;\r\n\r\n  board = [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let col = 0; col < columns; col++) {\r\n      htmlBoard[r].children[col].innerHTML = '';\r\n      htmlBoard[r].children[col].className = '';\r\n      htmlBoard[r].children[col].classList.add('field-cell');\r\n    }\r\n  }\r\n};\r\n\r\nconst starter = () => {\r\n  start.addEventListener('click', () => {\r\n    start.classList.add('restart');\r\n    start.classList.remove('start');\r\n\r\n    if (start.className.includes('restart')) {\r\n      start.innerHTML = 'Restart';\r\n      massageStart.classList.add('hidden');\r\n    }\r\n\r\n    reset();\r\n\r\n    randomaizer();\r\n    randomaizer();\r\n  });\r\n\r\n  window.addEventListener('keyup', (events) => {\r\n    if (start.className.includes('restart')) {\r\n      switch (events.code) {\r\n        case 'ArrowLeft':\r\n          slider('left');\r\n          randomaizer();\r\n          break;\r\n        case 'ArrowRight':\r\n          slider('right');\r\n          randomaizer();\r\n          break;\r\n        case 'ArrowUp':\r\n          slider('up');\r\n          randomaizer();\r\n          break;\r\n        case 'ArrowDown':\r\n          slider('down');\r\n          randomaizer();\r\n          break;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst slider = (course) => {\r\n  const boardVert = [\r\n    [],\r\n    [],\r\n    [],\r\n    [],\r\n  ];\r\n\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let i = 0; i < board[r].length; i++) {\r\n      boardVert[r].push(board[i][r]);\r\n    }\r\n\r\n    let row = board[r];\r\n\r\n    switch (course) {\r\n      case 'left':\r\n        row = board[r];\r\n\r\n        row = slide(row);\r\n        board[r] = row;\r\n        break;\r\n\r\n      case 'right':\r\n        row = board[r];\r\n        row.reverse();\r\n\r\n        row = slide(row);\r\n        row.reverse();\r\n        board[r] = row;\r\n        break;\r\n\r\n      case 'up':\r\n        row = boardVert[r];\r\n        row = slide(row);\r\n        boardVert[r] = row;\r\n\r\n        break;\r\n\r\n      case 'down':\r\n        row = boardVert[r];\r\n        row.reverse();\r\n        row = slide(row);\r\n        row.reverse();\r\n        boardVert[r] = row;\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  if (course === 'up' || course === 'down') {\r\n    for (let r = 0; r < rows; r++) {\r\n      for (let i = 0; i < columns; i++) {\r\n        board[i][r] = boardVert[r][i];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst slide = (r) => {\r\n  let numbers = r.filter(el => el !== 0);\r\n\r\n  for (let col = 0; col < numbers.length; col++) {\r\n    if (numbers[col] === numbers[col + 1]) {\r\n      numbers[col] *= 2;\r\n      score += numbers[col];\r\n      numbers[col + 1] = 0;\r\n\r\n      if (numbers[col] === 2048) {\r\n        messageWin.classList.remove('hidden');\r\n      }\r\n    }\r\n  }\r\n\r\n  numbers = numbers.filter(x => x !== 0);\r\n\r\n  while (numbers.length < columns) {\r\n    numbers.push(0);\r\n  }\r\n\r\n  return numbers;\r\n};\r\n\r\nstarter();\r\n"]}